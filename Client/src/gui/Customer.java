/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.event.*;
import java.net.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Calendar;
import java.sql.*;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;


/**
 *
 * @author pc
 */
public class Customer extends javax.swing.JFrame {
    Connection connect;
    Socket s;
    ObjectOutputStream output;
    ObjectInputStream input;
    /**
     * Creates new form welcome
     */
    public Customer() {
        initComponents();
        fillPort();
        String [] User=Login.email.split("[@]");
        hello.setText("Hello "+User[0].substring(0,1).toUpperCase()+User[0].substring(1).toLowerCase());
        hello.setBounds(320, 10, 390, 50);
        waitingPage();
        
        viewTable.getColumnModel().getColumn(1).setPreferredWidth(350);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        viewBooking = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        booking = new javax.swing.JPanel();
        dateChooser = new datechooser.beans.DateChooserCombo();
        jLabel1 = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        excursionCombo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        numberOfSeats = new javax.swing.JTextField();
        portCombo = new javax.swing.JComboBox<>();
        Sign_out = new javax.swing.JLabel();
        hello = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        view = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewTable = new javax.swing.JTable();
        cancelBooking = new javax.swing.JButton();
        update = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        BookingUpdate = new javax.swing.JButton();
        Sign_out2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        viewWaiting = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        waitTable = new javax.swing.JTable();
        cancelWaiting = new javax.swing.JButton();
        updateWaiting = new javax.swing.JButton();
        waitseat = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        Sign_out3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Hello = new javax.swing.JLabel();
        background = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bookings");
        setLocation(new java.awt.Point(500, 200));
        setMinimumSize(new java.awt.Dimension(1024, 576));
        setResizable(false);

        jPanel2.setName(""); // NOI18N
        jPanel2.setOpaque(false);
        jPanel2.setPreferredSize(new java.awt.Dimension(1024, 576));

        jLayeredPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jLayeredPane1.setFocusCycleRoot(true);
        jLayeredPane1.setInheritsPopupMenu(true);
        jLayeredPane1.setMaximumSize(new java.awt.Dimension(1024, 576));
        jLayeredPane1.setMinimumSize(new java.awt.Dimension(1024, 576));

        viewBooking.setBackground(new java.awt.Color(255, 255, 255));
        viewBooking.setToolTipText("");
        viewBooking.setAlignmentX(5.0F);
        viewBooking.setAlignmentY(0.0F);
        viewBooking.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        viewBooking.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        viewBooking.setOpaque(true);
        viewBooking.setPreferredSize(new java.awt.Dimension(1024, 500));
        viewBooking.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewBookingMouseClicked(evt);
            }
        });

        jPanel4.setAlignmentX(0.0F);
        jPanel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel4.setPreferredSize(new java.awt.Dimension(1024, 576));
        jPanel4.setLayout(new javax.swing.OverlayLayout(jPanel4));

        booking.setLayout(null);

        dateChooser.setCurrentView(new datechooser.view.appearance.AppearancesList("Grey",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 16),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 16),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 16),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 16),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 16),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 16),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    dateChooser.setCalendarPreferredSize(new java.awt.Dimension(300, 200));
    Calendar today = Calendar.getInstance();
    today.set(Calendar.HOUR_OF_DAY, 0);
    dateChooser.setMinDate(today);
    dateChooser.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
    booking.add(dateChooser);
    dateChooser.setBounds(740, 80, 155, 26);
    dateChooser.setVisible(false);

    jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
    jLabel1.setText("Port No.:");
    booking.add(jLabel1);
    jLabel1.setBounds(270, 160, 130, 33);

    submit.setText("Submit");
    submit.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            submitActionPerformed(evt);
        }
    });
    booking.add(submit);
    submit.setBounds(450, 360, 83, 29);

    jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
    jLabel5.setText("Select excursion :");
    booking.add(jLabel5);
    jLabel5.setBounds(270, 230, 187, 29);

    excursionCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Port ID first" }));
    booking.add(excursionCombo);
    excursionCombo.setBounds(510, 230, 320, 26);

    jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
    jLabel6.setText("Number of seats:");
    booking.add(jLabel6);
    jLabel6.setBounds(270, 300, 185, 33);
    booking.add(numberOfSeats);
    numberOfSeats.setBounds(510, 300, 70, 26);

    portCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Port Number" }));
    portCombo.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            portComboItemStateChanged(evt);
        }
    });
    booking.add(portCombo);
    portCombo.setBounds(510, 170, 200, 26);

    Sign_out.setFont(new java.awt.Font("Chiller", 1, 30)); // NOI18N
    Sign_out.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    Sign_out.setText("Sign Out");
    Sign_out.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            Sign_outMouseClicked(evt);
        }
    });
    booking.add(Sign_out);
    Sign_out.setBounds(910, 0, 110, 40);

    hello.setFont(new java.awt.Font("Chiller", 1, 36)); // NOI18N
    hello.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    hello.setText("Hello User");
    booking.add(hello);
    hello.setBounds(320, 10, 390, 50);

    jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.png"))); // NOI18N
    booking.add(jLabel8);
    jLabel8.setBounds(-140, -40, 1250, 630);

    jPanel4.add(booking);

    viewBooking.addTab("Bookings", jPanel4);

    view.setLayout(new javax.swing.OverlayLayout(view));

    jPanel5.setLayout(null);

    jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

    viewTable.setModel(new javax.swing.table.DefaultTableModel(
        bookedPage(),
        new String [] {
            "Port ID", "Excursion", "Seats","Date","Booking_ID"
        }
    ));
    viewTable.setGridColor(new java.awt.Color(255, 255, 255));
    jScrollPane1.setViewportView(viewTable);
    viewTable.setDefaultEditor(Object.class, null);

    jPanel5.add(jScrollPane1);
    jScrollPane1.setBounds(120, 90, 760, 295);

    cancelBooking.setText("Cancel booking");
    cancelBooking.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelBookingActionPerformed(evt);
        }
    });
    jPanel5.add(cancelBooking);
    cancelBooking.setBounds(420, 440, 141, 29);
    jPanel5.add(update);
    update.setBounds(450, 400, 97, 26);

    jLabel7.setText("Update no of seats");
    jPanel5.add(jLabel7);
    jLabel7.setBounds(290, 400, 132, 20);

    BookingUpdate.setText("Update");
    BookingUpdate.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            BookingUpdateActionPerformed(evt);
        }
    });
    jPanel5.add(BookingUpdate);
    BookingUpdate.setBounds(580, 400, 83, 29);

    Sign_out2.setFont(new java.awt.Font("Chiller", 1, 30)); // NOI18N
    Sign_out2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    Sign_out2.setText("Sign Out");
    Sign_out2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            Sign_out2MouseClicked(evt);
        }
    });
    jPanel5.add(Sign_out2);
    Sign_out2.setBounds(910, 0, 110, 40);

    jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.png"))); // NOI18N
    jPanel5.add(jLabel4);
    jLabel4.setBounds(-140, -40, 1190, 630);

    view.add(jPanel5);

    viewBooking.addTab("View Booking", view);

    viewWaiting.setLayout(null);

    jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

    waitTable.setModel(new javax.swing.table.DefaultTableModel(
        waitingPage()
        ,
        new String [] {
            "Port Number", "Excursion", "Number Of Seats"
        }
    ));
    jScrollPane2.setViewportView(waitTable);
    waitTable.setDefaultEditor(Object.class, null);

    viewWaiting.add(jScrollPane2);
    jScrollPane2.setBounds(120, 90, 760, 280);

    cancelWaiting.setText("Cancel Waiting");
    cancelWaiting.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelWaitingActionPerformed(evt);
        }
    });
    viewWaiting.add(cancelWaiting);
    cancelWaiting.setBounds(420, 440, 137, 29);

    updateWaiting.setText("Update ");
    updateWaiting.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            updateWaitingActionPerformed(evt);
        }
    });
    viewWaiting.add(updateWaiting);
    updateWaiting.setBounds(580, 400, 100, 29);
    viewWaiting.add(waitseat);
    waitseat.setBounds(450, 400, 110, 26);

    jLabel10.setText("Update no of Seats");
    viewWaiting.add(jLabel10);
    jLabel10.setBounds(290, 400, 210, 20);

    Sign_out3.setFont(new java.awt.Font("Chiller", 1, 30)); // NOI18N
    Sign_out3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    Sign_out3.setText("Sign Out");
    Sign_out3.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            Sign_out3MouseClicked(evt);
        }
    });
    viewWaiting.add(Sign_out3);
    Sign_out3.setBounds(910, 0, 110, 40);

    jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.png"))); // NOI18N
    viewWaiting.add(jLabel9);
    jLabel9.setBounds(-140, -40, 1180, 630);

    viewBooking.addTab("View Waitings", viewWaiting);

    jLayeredPane1.add(viewBooking);
    viewBooking.setBounds(0, 0, 1024, 580);

    jPanel3.setBackground(new java.awt.Color(255, 255, 255));

    Hello.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
    Hello.setForeground(new java.awt.Color(255, 255, 255));
    Hello.setText("Hello User");

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addContainerGap(433, Short.MAX_VALUE)
            .addComponent(Hello)
            .addGap(488, 488, 488))
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(Hello)
            .addContainerGap())
    );

    jLayeredPane1.add(jPanel3);
    jPanel3.setBounds(0, 0, 1030, 50);

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1024, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
    );

    background.setLayout(new javax.swing.OverlayLayout(background));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    //fills excusion name according to the port selected
    private void portComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_portComboItemStateChanged
        
        if (evt.getStateChange() == ItemEvent.SELECTED){
            try {
                if (portCombo.getSelectedItem()!="Select Port Number"){
                    
                s= new Socket("localhost",5000);
                String portNumber;
                  
                portNumber = (String) portCombo.getSelectedItem();
                String[] portArray={"return_combo",portNumber};
                  
                ObjectOutputStream oo=new ObjectOutputStream(s.getOutputStream());
                ObjectInputStream oi=new ObjectInputStream(s.getInputStream());
                oo.writeObject(portArray);
                oo.flush();
                String[] excursionsAvailable;
                excursionCombo.removeAllItems();

                excursionsAvailable = (String[]) oi.readObject();
               
                for (int i=0;i<excursionsAvailable.length;i++){
                    excursionCombo.addItem(excursionsAvailable[i]);//;
                            }
                }
                else{
                    excursionCombo.removeAllItems();
                    excursionCombo.addItem("Select Port ID first");
                }
            } 
            catch (Exception ex) {
                ex.printStackTrace();
            }

        } else {
            //
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_portComboItemStateChanged

    @SuppressWarnings("empty-statement")
    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        if (portCombo.getSelectedItem()!="Select Port Number"){
        String date=dateChooser.getText();
        if (numberOfSeats.getText().equals("")){
                JOptionPane.showMessageDialog(this,"Please enter number of seats");
            }
        else{
        try {
            
            int check=Integer.parseInt(numberOfSeats.getText());
            if (check>32){
                JOptionPane.showMessageDialog(this,"Max seat limit(32) exceeded");
            }
            else if (check<=0){
                JOptionPane.showMessageDialog(this,"Invalid number of seats");
            }
            else{
            Socket sccc= new Socket("localhost",5000);
            output=new ObjectOutputStream(sccc.getOutputStream());
            SimpleDateFormat dt=new SimpleDateFormat("mm/dd/yy");
            Date date1=dt.parse(date);
            DateFormat df=new SimpleDateFormat("yyyy-mm-dd");
            String rr=df.format(date1);
   
            String[] booking={"MaxBooking",numberOfSeats.getText(),rr,"1","0",Login.email,(String) excursionCombo.getSelectedItem()};
            String[] waiting ={"AddWaiting",numberOfSeats.getText(),rr,"0","1",Login.email,(String) excursionCombo.getSelectedItem()};
            
            
            output.writeObject(booking);
            input=new ObjectInputStream(sccc.getInputStream());
            String[] message=(String []) input.readObject();
            if (message[0].equals("Exists")){
                JOptionPane.showMessageDialog(this,"You cannot book same excursion twice");
            }
            else{
            //condition that runs if seats are not enough 
            if (message[1].equals("Booking Extended"))
            {
                Boolean select=JOptionPane.showConfirmDialog(this,"Sorry Not enough seats!\n Do you want to join the waiting list?\n Available Seats: "+message[2],
                        "Warning",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_OPTION;
             
                 System.out.println(select);
                 System.out.println(message[1]);
                 
                
                if (select && Integer.parseInt(message[2])>=0)
                {   
                    Socket s= new Socket("localhost",5000);
                    ObjectOutputStream out=new ObjectOutputStream(s.getOutputStream());
                    System.out.println("Adding to waiting list");
                    waiting[1]=Integer.toString(Integer.parseInt(waiting[1])-Integer.parseInt(message[2]));
                    out.writeObject(waiting);
                    Socket ss=new Socket("localhost",5000);
                    booking[0]="Booking";
                    booking[1]=message[2];
                    ObjectOutputStream oo=new ObjectOutputStream(ss.getOutputStream());
                    oo.writeObject(booking);
                    this.dispose();
                    new Customer().setVisible(true);
                }
                
            
                
            }
            else if(!message[1].equals("Booking Extended")) {
                JOptionPane.showMessageDialog(this,"Booking succesful");
                Socket ss=new Socket("localhost",5000);
                    booking[0]="Booking";
                    booking[1]=numberOfSeats.getText();
                    ObjectOutputStream oo=new ObjectOutputStream(ss.getOutputStream());
                    oo.writeObject(booking);
                    this.dispose();
                    new Customer().setVisible(true);
               
            }
          
            
            
            }
        }
        }
        catch (NumberFormatException ex)
        {
            JOptionPane.showMessageDialog(this,"Invalid Number of seats");
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
        }
        }
        
        else{
            JOptionPane.showMessageDialog(this,"Please select port number");
        }
    
    }//GEN-LAST:event_submitActionPerformed
    //fills  port number from database
    private void fillPort(){
        ObjectInputStream oi=null;
        ObjectOutputStream oo=null;

        try {
            Socket sc= new Socket("localhost",5000);
            String[] portArray={"return port"};
            oo = new ObjectOutputStream(sc.getOutputStream());
            oi = new ObjectInputStream(sc.getInputStream());
            oo.writeObject(portArray);
            System.out.print("sending array");
            String a[]=(String []) oi.readObject();
            for(int j=0;j<a.length;j++)
                {
                    portCombo.addItem(a[j]);
                }
            
            } catch (Exception ex) {
                
            }     
    }
    private void cancelBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBookingActionPerformed
        if (viewTable.getSelectedRow()==-1)
        {
            JOptionPane.showMessageDialog(this,"Please select a row");
        }
        else{
       if(JOptionPane.showConfirmDialog(this,"Are you sure you want to cancel booking on \n"+(String)viewTable.getValueAt(viewTable.getSelectedRow(),1),"Warning",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_OPTION){
       
       try{
        String []a = {"cancel",Login.email,(String)viewTable.getValueAt(viewTable.getSelectedRow(),1)};
        
        Socket s= new Socket("localhost",5000);
        ObjectOutputStream oo=new ObjectOutputStream(s.getOutputStream());
        ObjectInputStream oi=new ObjectInputStream(s.getInputStream());
        
        oo.writeObject(a);
        Thread.sleep(75);
        viewTable.setModel(new javax.swing.table.DefaultTableModel(
        bookedPage(),
        new String [] {
            "Port ID", "Excursion", "Seats","Date","Booking_ID"
        }
        ));
        viewTable.getColumnModel().getColumn(1).setPreferredWidth(300);
        waitTable.setModel(new javax.swing.table.DefaultTableModel(waitingPage(),
                new String [] {
                "Port Number", "Excursion", "Number Of Seats"}
                ));
        }
       catch(Exception e)
       {
           e.getMessage();
        }
        }
        }
    }//GEN-LAST:event_cancelBookingActionPerformed

    private void BookingUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookingUpdateActionPerformed
        try{
            if (update.getText().equals("")){
                JOptionPane.showMessageDialog(this,"Please enter number of seats");
            }
            else if (viewTable.getSelectedRow()==-1){
                JOptionPane.showMessageDialog(this,"Please select a row");
            }
            else if (Integer.parseInt(update.getText())<=0){
                JOptionPane.showMessageDialog(this,"Invalid number of seats");
            }
            else{

                if(Integer.parseInt(update.getText())>32){
                    JOptionPane.showMessageDialog(this,"Max seat limit (32) exceeded");
                }
                else{
                viewTable.setValueAt(update.getText(),viewTable.getSelectedRow(),2);
                try{
                   
                    String []b  = {"updateBooking",(String)viewTable.getModel().getValueAt(viewTable.getSelectedRow(),2),Login.email,(String)viewTable.getModel().getValueAt(viewTable.getSelectedRow(),3),(String)viewTable.getModel().getValueAt(viewTable.getSelectedRow(),1),(String)viewTable.getModel().getValueAt(viewTable.getSelectedRow(),4)};
                    Socket s= new Socket("localhost",5000);
                    ObjectOutputStream oo=new ObjectOutputStream(s.getOutputStream());
                    ObjectInputStream oi=new ObjectInputStream(s.getInputStream());
                    update.setText("");
                    oo.writeObject(b);
                   

                    String [] message=(String [])oi.readObject();
                    System.out.println(message[0]);
                    if (message[0].equals("Waiting")){
                        if(JOptionPane.showConfirmDialog(this,"Sorry Not enough Seats!\n Do you want to add to the waiting list?\n Extra Available Seats: "+message[2],"Warning",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_OPTION){
                           
                            String[] confirm={"true"};
                            ObjectOutputStream ooo= new ObjectOutputStream(s.getOutputStream()); 
                            ooo.writeObject(confirm);
                            
                        }


                    }
                    else if (message[0].equals("Success")){
                            JOptionPane.showMessageDialog(this,"Seats have been updated");
                            
                    }

                }
                catch(Exception e){
                    e.printStackTrace();        
                }
                finally{
                Thread.sleep(50);//waiting for server to complete operation before updating table
                viewTable.setModel(new javax.swing.table.DefaultTableModel(bookedPage(),
                new String [] {
                "Port ID", "Excursion", "Seats","Date","Booking ID"}
                
                        
                ));
               
                waitTable.setModel(new javax.swing.table.DefaultTableModel(waitingPage(),
                new String [] {
                "Port Number", "Excursion", "Number Of Seats"}
                ));
                viewTable.getColumnModel().getColumn(1).setPreferredWidth(300);
                
                }
            }
            }
        }
        catch (NumberFormatException nfe) {//checks to see if input is integer
            JOptionPane.showMessageDialog(this,"Please enter a number");
            update.setText("");}
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_BookingUpdateActionPerformed

    private void cancelWaitingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelWaitingActionPerformed
          if (waitTable.getSelectedRow()==-1)
        {
            JOptionPane.showMessageDialog(this,"Please select a row");
        }
        else{
       if(JOptionPane.showConfirmDialog(this,"Are you sure you want to cancel booking on \n"+(String)waitTable.getValueAt(waitTable.getSelectedRow(),1),"Warning",JOptionPane.YES_NO_OPTION)== JOptionPane.YES_OPTION){
       
        
        ObjectOutputStream oo=null;

        try {
            Socket sc= new Socket("localhost",5000);
            String[] arr={"cancelWaiting",Login.email,(String)waitTable.getModel().getValueAt(waitTable.getSelectedRow(),1)};
            oo=new ObjectOutputStream(sc.getOutputStream());
            oo.writeObject(arr);
        Thread.sleep(100);//waiting for server to complete operation before updating table
        waitTable.setModel(new javax.swing.table.DefaultTableModel(
        waitingPage()
        ,
        new String [] {
            "Port Number", "Excursion", "Number Of Seats"
        }
    ));
        }
        catch(Exception e){
            e.printStackTrace();
        }
       }
       }
    }//GEN-LAST:event_cancelWaitingActionPerformed

    private void Sign_outMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Sign_outMouseClicked
        this.dispose();
        new Welcome().setVisible(true);
    }//GEN-LAST:event_Sign_outMouseClicked

    private void Sign_out3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Sign_out3MouseClicked
        
        this.dispose();
        new Welcome().setVisible(true);
       
    }//GEN-LAST:event_Sign_out3MouseClicked

    private void Sign_out2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Sign_out2MouseClicked
        this.dispose();
        new Welcome().setVisible(true);
    }//GEN-LAST:event_Sign_out2MouseClicked

    private void updateWaitingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateWaitingActionPerformed
        
        try {
            if (Integer.parseInt(waitseat.getText())>32){
                JOptionPane.showMessageDialog(this,"Max seat limit(32) exceeded!");
            }
             else if (Integer.parseInt(waitseat.getText())<=0){
                JOptionPane.showMessageDialog(this,"Invalid number of seats!");
            }
            else if (waitseat.getText().equals("")){
                JOptionPane.showMessageDialog(this,"Please enter number of seats!");  
            }
           
            else if (waitTable.getSelectedRow()==-1){
                JOptionPane.showMessageDialog(this,"Please select a row!");
            }
            else{
            String[] b={"updateWaiting",Login.email,(String)waitTable.getModel().getValueAt(waitTable.getSelectedRow(),1),waitseat.getText()};
            Socket s= new Socket("localhost",5000);
            ObjectOutputStream oo=new ObjectOutputStream(s.getOutputStream());
            ObjectInputStream oi=new ObjectInputStream(s.getInputStream());
            update.setText("");
     
            oo.writeObject(b);
            JOptionPane.showMessageDialog(this,"Seats have been updated!");
            Thread.sleep(75);//waiting for server to complete operation before updating table
            waitTable.setModel(new javax.swing.table.DefaultTableModel(waitingPage(),
                new String [] {
                "Port Number", "Excursion", "Number Of Seats"}
                ));
            }
        } catch (IOException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NumberFormatException nfe){
            JOptionPane.showMessageDialog(this,"Please enter a valid integer");
        }
    }//GEN-LAST:event_updateWaitingActionPerformed

    private void viewBookingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewBookingMouseClicked
        //Updating tables every time tab changes
        waitTable.setModel(new javax.swing.table.DefaultTableModel(waitingPage(),
                new String [] {
                "Port Number", "Excursion", "Number Of Seats"}
                ));
        viewTable.setModel(new javax.swing.table.DefaultTableModel(bookedPage(),
                new String [] {
                "Port ID", "Excursion", "Seats","Date","Booking ID"}
                
                        
                ));
        viewTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            
    }//GEN-LAST:event_viewBookingMouseClicked
    private String[][] bookedPage(){
        ObjectInputStream oi=null;
        ObjectOutputStream oo=null;

        try {
            Socket sc= new Socket("localhost",5000);
            String[] arr={"Check Booking",Login.email};
            oo = new ObjectOutputStream(sc.getOutputStream());
            oi = new ObjectInputStream(sc.getInputStream());
            oo.writeObject(arr);
            System.out.print("checking booking\n");
            String a[][]=(String [][]) oi.readObject();
            return a;
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return null;
       
}
    
    private String[][] waitingPage(){
        ObjectInputStream oi=null;
        ObjectOutputStream oo=null;

        try {
            Socket sc= new Socket("localhost",5000);
            String[] arr={"customerWaiting",Login.email};
            oo = new ObjectOutputStream(sc.getOutputStream());
            oi = new ObjectInputStream(sc.getInputStream());
            oo.writeObject(arr);
            System.out.print("checking waiting\n");
            String a[][]=(String [][]) oi.readObject();
            return a;
            
        }
        catch(Exception e){
            e.printStackTrace();
        }
        return null;
    }
     // returns a 2d array according to request  
   
    /**
     * @param args the command line arguments
     */
        
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BookingUpdate;
    private javax.swing.JLabel Hello;
    private javax.swing.JLabel Sign_out;
    private javax.swing.JLabel Sign_out2;
    private javax.swing.JLabel Sign_out3;
    private javax.swing.JPanel background;
    private javax.swing.JPanel booking;
    private javax.swing.JButton cancelBooking;
    private javax.swing.JButton cancelWaiting;
    private datechooser.beans.DateChooserCombo dateChooser;
    private javax.swing.JComboBox<String> excursionCombo;
    private javax.swing.JLabel hello;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField numberOfSeats;
    private javax.swing.JComboBox<String> portCombo;
    private javax.swing.JButton submit;
    private javax.swing.JTextField update;
    private javax.swing.JButton updateWaiting;
    private javax.swing.JPanel view;
    private javax.swing.JTabbedPane viewBooking;
    private javax.swing.JTable viewTable;
    private javax.swing.JPanel viewWaiting;
    private javax.swing.JTable waitTable;
    private javax.swing.JTextField waitseat;
    // End of variables declaration//GEN-END:variables
}
